// public class CustomLoggingMiddleware
// {
//     // A RequestDelegate is a delegate type that represents a function
//     // capable of handling an HTTP request and generating an HTTP response
//     private readonly RequestDelegate _next;

//     public CustomLoggingMiddleware(RequestDelegate next)
//     {
//         _next = next;
//     }

//     // HttpContext represents the HTTP context for a single request-response transaction
//     // InvokeAsync is a typical method signature for a middleware component
//     public async Task InvokeAsync(HttpContext context)
//     {
//         // Actions performed before the await _next(context) line typically relate to
//         // processing the incoming request and can include tasks like logging request details,
//         // authentication, and request modification.
//         Console.WriteLine($"CustomLoggingMiddleware called during request processing");

//         // Call the next middleware in the pipeline
//         //  If this is the last middleware, it will call the
//         // actual request handler (basically the controller)
//         await _next(context);

//         // Actions performed after the await _next(context) line typically relate to processing
//         // the response generated by the downstream components.
//         Console.WriteLine($"CustomLoggingMiddleware called during response processing");
//     }
// }

// public class CustomLoggingMiddleware2
// {

//     // A RequestDelegate is a delegate type that represents a function
//     // capable of handling an HTTP request and generating an HTTP response
//     private readonly RequestDelegate _next;

//     public CustomLoggingMiddleware2(RequestDelegate next)
//     {
//         _next = next;
//     }

//     // HttpContext represents the HTTP context for a single request-response transaction
//     // InvokeAsync is a typical method signature for a middleware component
//     public async Task InvokeAsync(HttpContext context)
//     {
//         // Actions performed before the await _next(context) line typically relate to
//         // processing the incoming request and can include tasks like logging request details,
//         // authentication, and request modification.
//         Console.WriteLine($"CustomLoggingMiddleware2 called during request processing");

//         // Call the next middleware in the pipeline
//         //  If this is the last middleware, it will call the
//         // actual request handler (basically the controller)
//         await _next(context);

//         // Actions performed after the await _next(context) line typically relate to processing
//         // the response generated by the downstream components.
//         Console.WriteLine($"CustomLoggingMiddleware2 called during response processing");
//     }
// }

// public class Program
// {
//     public static void Main(string[] args)
//     {
//         var builder = WebApplication.CreateBuilder(args);
//         var app = builder.Build();
//         app.UseMiddleware<CustomLoggingMiddleware>();
//         app.UseMiddleware<CustomLoggingMiddleware2>();

//         app.MapGet("/", () =>
//         {
//             Console.WriteLine("/ controller called");
//             return "Hello World11!";
//         });

//         app.MapGet("/hello", () =>
//         {
//             Console.WriteLine("/hello Hello World!1ij2in3in controller called");
//             return "Hello World!1ij2in3in";
//         });
//         app.Run();
//     }
// }


// Reading requests in the middleware
using System.Diagnostics;

public class CustomLoggingMiddleware
{
    private readonly RequestDelegate _next;

    public CustomLoggingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        await _next(context);
        stopwatch.Stop();
        Console.WriteLine($"{context.Request.Path} took {stopwatch.ElapsedMilliseconds}ms and the response code was {context.Response.StatusCode}");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        var builder = WebApplication.CreateBuilder(args);
        var app = builder.Build();
        app.UseMiddleware<CustomLoggingMiddleware>();

        app.MapGet("/", () => "Hello World!");
        app.MapGet("/hello", () => "Hello World by /hello");
        app.Run();
    }
}